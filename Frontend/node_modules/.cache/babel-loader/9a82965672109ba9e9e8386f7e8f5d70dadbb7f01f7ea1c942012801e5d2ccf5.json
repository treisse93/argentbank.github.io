{"ast":null,"code":"import Axios from 'axios';\n\n// Function to fetch a user's token by providing their email and password\nasync function fetch_Token(password, email) {\n  try {\n    // Set the base URL for Axios\n    Axios.defaults.baseURL = 'http://localhost:3001/api/v1';\n\n    // Make a POST request to the /user/login endpoint with email and password data\n    const response = await Axios.request({\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      url: `/user/login`,\n      data: {\n        'email': email,\n        'password': password\n      }\n    });\n\n    // Check if the response status is 200 (OK)\n    if (response.data.status === 200) {\n      const {\n        body\n      } = response.data;\n      const {\n        token\n      } = body;\n      return token;\n    }\n  } catch (error) {\n    return false; // Return false if there's an error\n  }\n\n  return null; // Return null if no token is found\n}\n\n// Function to fetch user information using their token\nasync function fetch_UserInfos(token) {\n  const user = await Axios.request({\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    method: 'post',\n    url: `/user/profile`\n  });\n\n  // Check if the response status is 200 (OK)\n  if (user.data.status === 200) {\n    return user.data.body; // Return user information\n  }\n\n  return null; // Return null if no user information is found\n}\n\n// Function to update a user's first name and last name using their token\nasync function put_NewInfos(token, firstName, lastName) {\n  await Axios.request({\n    method: 'put',\n    url: 'http://localhost:3001/api/v1/user/profile',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    data: {\n      firstName: firstName,\n      lastName: lastName\n    }\n  });\n  return null; // Return null as no specific data is returned\n}\n\nexport { fetch_Token, fetch_UserInfos, put_NewInfos };","map":{"version":3,"names":["Axios","fetch_Token","password","email","defaults","baseURL","response","request","headers","method","url","data","status","body","token","error","fetch_UserInfos","user","put_NewInfos","firstName","lastName"],"sources":["C:/Users/Phoenix/Downloads/argent_bank/argent_bank/Frontend/src/Services/login.service.js"],"sourcesContent":["import Axios from 'axios';\n\n// Function to fetch a user's token by providing their email and password\nasync function fetch_Token(password, email) {\n  try {\n    // Set the base URL for Axios\n    Axios.defaults.baseURL = 'http://localhost:3001/api/v1';\n\n    // Make a POST request to the /user/login endpoint with email and password data\n    const response = await Axios.request({\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'post',\n      url: `/user/login`,\n      data: {\n        'email': email,\n        'password': password\n      },\n    })\n\n    // Check if the response status is 200 (OK)\n    if (response.data.status === 200) {\n      const { body } = response.data;\n      const { token } = body;\n      return token;\n    }\n  } catch (error) {\n    return false; // Return false if there's an error\n  }\n  return null; // Return null if no token is found\n}\n\n// Function to fetch user information using their token\nasync function fetch_UserInfos(token) {\n  const user = await Axios.request({\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    method: 'post',\n    url: `/user/profile`,\n  })\n\n  // Check if the response status is 200 (OK)\n  if (user.data.status === 200) {\n    return user.data.body; // Return user information\n  }\n  return null; // Return null if no user information is found\n}\n\n// Function to update a user's first name and last name using their token\nasync function put_NewInfos(token,firstName,lastName) {\n  await Axios.request({\n    method: 'put',\n    url: 'http://localhost:3001/api/v1/user/profile',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    data: {\n      firstName:firstName,\n      lastName:lastName\n    }\n  });\n\n  return null; // Return null as no specific data is returned\n}\n\nexport { fetch_Token, fetch_UserInfos, put_NewInfos };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,eAAeC,WAAWA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAC1C,IAAI;IACF;IACAH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,8BAA8B;;IAEvD;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,OAAO,CAAC;MACnCC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,aAAY;MAClBC,IAAI,EAAE;QACJ,OAAO,EAAER,KAAK;QACd,UAAU,EAAED;MACd;IACF,CAAC,CAAC;;IAEF;IACA,IAAII,QAAQ,CAACK,IAAI,CAACC,MAAM,KAAK,GAAG,EAAE;MAChC,MAAM;QAAEC;MAAK,CAAC,GAAGP,QAAQ,CAACK,IAAI;MAC9B,MAAM;QAAEG;MAAM,CAAC,GAAGD,IAAI;MACtB,OAAOC,KAAK;IACd;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,KAAK,CAAC,CAAC;EAChB;;EACA,OAAO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA,eAAeC,eAAeA,CAACF,KAAK,EAAE;EACpC,MAAMG,IAAI,GAAG,MAAMjB,KAAK,CAACO,OAAO,CAAC;IAC/BC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASM,KAAM;IACnC,CAAC;IACDL,MAAM,EAAE,MAAM;IACdC,GAAG,EAAG;EACR,CAAC,CAAC;;EAEF;EACA,IAAIO,IAAI,CAACN,IAAI,CAACC,MAAM,KAAK,GAAG,EAAE;IAC5B,OAAOK,IAAI,CAACN,IAAI,CAACE,IAAI,CAAC,CAAC;EACzB;;EACA,OAAO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA,eAAeK,YAAYA,CAACJ,KAAK,EAACK,SAAS,EAACC,QAAQ,EAAE;EACpD,MAAMpB,KAAK,CAACO,OAAO,CAAC;IAClBE,MAAM,EAAE,KAAK;IACbC,GAAG,EAAE,2CAA2C;IAChDF,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASM,KAAM;IACnC,CAAC;IACDH,IAAI,EAAE;MACJQ,SAAS,EAACA,SAAS;MACnBC,QAAQ,EAACA;IACX;EACF,CAAC,CAAC;EAEF,OAAO,IAAI,CAAC,CAAC;AACf;;AAEA,SAASnB,WAAW,EAAEe,eAAe,EAAEE,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}