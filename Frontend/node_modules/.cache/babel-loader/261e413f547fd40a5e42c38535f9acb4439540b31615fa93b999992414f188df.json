{"ast":null,"code":"import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport authSlice, { set_Login } from \"./authReducer/authSlice.js\";\nimport userSlice, { set_User } from \"./userReducer/userSlice.js\";\n\n// Combine multiple reducers into a single root reducer\nconst rootReducer = combineReducers({\n  user: userSlice,\n  // User reducer\n  login: authSlice // Authentication reducer\n});\n\n// Configure the Redux store with the root reducer\nconst store = configureStore({\n  reducer: rootReducer // Set the root reducer for the store\n});\n\n// Check if login information is stored in local storage\nif (localStorage.getItem(\"login\")) {\n  // Load login information from local storage and dispatch it to Redux store\n  store.dispatch(set_Login(JSON.parse(localStorage.getItem(\"login\"))));\n  // Check if user information is stored in local storage\n  if (localStorage.getItem(\"user\")) {\n    // Load user information from local storage and dispatch it to Redux store\n    store.dispatch(set_User(JSON.parse(localStorage.getItem(\"user\"))));\n  }\n}\n\n// Export the configured Redux store\nexport default store;","map":{"version":3,"names":["combineReducers","configureStore","authSlice","set_Login","userSlice","set_User","rootReducer","user","login","store","reducer","localStorage","getItem","dispatch","JSON","parse"],"sources":["C:/Users/Phoenix/Documents/Developpeur_d_application_JavaScript_React/projet_13/argent_bank/Frontend/src/Redux/store.js"],"sourcesContent":["import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport authSlice, { set_Login } from \"./authReducer/authSlice.js\";\nimport userSlice, { set_User } from \"./userReducer/userSlice.js\";\n\n// Combine multiple reducers into a single root reducer\nconst rootReducer = combineReducers({\n  user: userSlice, // User reducer\n  login: authSlice, // Authentication reducer\n});\n\n// Configure the Redux store with the root reducer\nconst store = configureStore({\n  reducer: rootReducer, // Set the root reducer for the store\n});\n\n// Check if login information is stored in local storage\nif (localStorage.getItem(\"login\")) {\n  // Load login information from local storage and dispatch it to Redux store\n  store.dispatch(set_Login(JSON.parse(localStorage.getItem(\"login\"))));\n  // Check if user information is stored in local storage\n  if (localStorage.getItem(\"user\")) {\n    // Load user information from local storage and dispatch it to Redux store\n    store.dispatch(set_User(JSON.parse(localStorage.getItem(\"user\"))));\n  }\n}\n\n// Export the configured Redux store\nexport default store;\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAClE,OAAOC,SAAS,IAAIC,SAAS,QAAQ,4BAA4B;AACjE,OAAOC,SAAS,IAAIC,QAAQ,QAAQ,4BAA4B;;AAEhE;AACA,MAAMC,WAAW,GAAGN,eAAe,CAAC;EAClCO,IAAI,EAAEH,SAAS;EAAE;EACjBI,KAAK,EAAEN,SAAS,CAAE;AACpB,CAAC,CAAC;;AAEF;AACA,MAAMO,KAAK,GAAGR,cAAc,CAAC;EAC3BS,OAAO,EAAEJ,WAAW,CAAE;AACxB,CAAC,CAAC;;AAEF;AACA,IAAIK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;EACjC;EACAH,KAAK,CAACI,QAAQ,CAACV,SAAS,CAACW,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACpE;EACA,IAAID,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAE;IAChC;IACAH,KAAK,CAACI,QAAQ,CAACR,QAAQ,CAACS,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACpE;AACF;;AAEA;AACA,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}