{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create an authentication slice with initial state\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    authenticated: false,\n    // Represents whether the user is authenticated\n    token: null,\n    // Stores the user's authentication token\n    keepLogging: false // Indicates if the user wants to keep logged in\n  },\n  reducers: {\n    // Action to set the user's authentication token\n    set_Token: (state, action) => {\n      state.token = action.payload;\n\n      // Update the authentication token in local storage\n      const {\n        login\n      } = localStorage.getItem(\"login\") || {};\n      login.token = action.payload;\n      localStorage.setItem(\"login\", JSON.stringify(login));\n    },\n    // Action to set the authenticated state to true\n    set_IsAuth: (state, action) => {\n      state.authenticated = true;\n\n      // Update the authenticated state in local storage\n      const {\n        login\n      } = localStorage.getItem(\"login\") || {};\n      login.authenticated = true;\n      localStorage.setItem(\"login\", JSON.stringify(login));\n    },\n    // Action to set the keepLogging state\n    set_KeepLogging: (state, action) => {\n      state.keepLogging = action.payload;\n\n      // Update the keepLogging state in local storage\n      const {\n        login\n      } = localStorage.getItem(\"login\");\n      login.keepLogging = action.payload;\n    },\n    // Action to set login state with token and keepLogging\n    set_Login: (state, action) => {\n      state.authenticated = true;\n      state.keepLogging = action.payload.keepLogging;\n      state.token = action.payload.token;\n\n      // Update the login state in local storage\n      localStorage.setItem(\"login\", JSON.stringify({\n        keepLogging: action.payload.keepLogging,\n        token: action.payload.token,\n        authenticated: action.payload.authenticated\n      }));\n    },\n    // Action to remove authentication data\n    remove_Auth: (state, action) => {\n      state.authenticated = false;\n      state.keepLogging = false;\n      state.token = null;\n\n      // Update the local storage to clear authentication data\n      localStorage.setItem(\"login\", JSON.stringify({\n        keepLogging: false,\n        token: null,\n        authenticated: false\n      }));\n    }\n  }\n});\n\n// Export the reducer and actions\nexport default authSlice.reducer;\nexport const {\n  set_Token,\n  set_IsAuth,\n  set_KeepLogging,\n  remove_Auth,\n  set_Login\n} = authSlice.actions;","map":{"version":3,"names":["createSlice","authSlice","name","initialState","authenticated","token","keepLogging","reducers","set_Token","state","action","payload","login","localStorage","getItem","setItem","JSON","stringify","set_IsAuth","set_KeepLogging","set_Login","remove_Auth","reducer","actions"],"sources":["C:/Users/Phoenix/Documents/Developpeur_d_application_JavaScript_React/projet_13/argent_bank/Frontend/src/Redux/authReducer/authSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create an authentication slice with initial state\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    authenticated: false, // Represents whether the user is authenticated\n    token: null, // Stores the user's authentication token\n    keepLogging: false, // Indicates if the user wants to keep logged in\n  },\n  reducers: {\n    // Action to set the user's authentication token\n    set_Token: (state, action) => {\n      state.token = action.payload;\n\n      // Update the authentication token in local storage\n      const { login } = localStorage.getItem(\"login\") || {};\n      login.token = action.payload;\n      localStorage.setItem(\"login\", JSON.stringify(login));\n    },\n    \n    // Action to set the authenticated state to true\n    set_IsAuth: (state, action) => {\n      state.authenticated = true;\n\n      // Update the authenticated state in local storage\n      const { login } = localStorage.getItem(\"login\") || {};\n      login.authenticated = true;\n      localStorage.setItem(\"login\", JSON.stringify(login));\n    },\n\n    // Action to set the keepLogging state\n    set_KeepLogging: (state, action) => {\n      state.keepLogging = action.payload;\n\n      // Update the keepLogging state in local storage\n      const { login } = localStorage.getItem(\"login\");\n      login.keepLogging = action.payload;\n    },\n    // Action to set login state with token and keepLogging\n    set_Login: (state, action) => {\n      state.authenticated = true;\n      state.keepLogging = action.payload.keepLogging;\n      state.token = action.payload.token;\n\n      // Update the login state in local storage\n      localStorage.setItem(\"login\", JSON.stringify({\n        keepLogging: action.payload.keepLogging,\n        token: action.payload.token,\n        authenticated: action.payload.authenticated,\n      }));\n    },\n    // Action to remove authentication data\n    remove_Auth: (state, action) => {\n      state.authenticated = false;\n      state.keepLogging = false;\n      state.token = null;\n\n      // Update the local storage to clear authentication data\n      localStorage.setItem(\"login\", JSON.stringify({\n        keepLogging: false,\n        token: null,\n        authenticated: false,\n      }));\n    },\n  },\n});\n\n// Export the reducer and actions\nexport default authSlice.reducer;\nexport const { set_Token, set_IsAuth, set_KeepLogging, remove_Auth, set_Login } = authSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,aAAa,EAAE,KAAK;IAAE;IACtBC,KAAK,EAAE,IAAI;IAAE;IACbC,WAAW,EAAE,KAAK,CAAE;EACtB,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACC,OAAO;;MAE5B;MACA,MAAM;QAAEC;MAAM,CAAC,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;MACrDF,KAAK,CAACP,KAAK,GAAGK,MAAM,CAACC,OAAO;MAC5BE,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;IACtD,CAAC;IAED;IACAM,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACL,aAAa,GAAG,IAAI;;MAE1B;MACA,MAAM;QAAEQ;MAAM,CAAC,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;MACrDF,KAAK,CAACR,aAAa,GAAG,IAAI;MAC1BS,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;IACtD,CAAC;IAED;IACAO,eAAe,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACC,OAAO;;MAElC;MACA,MAAM;QAAEC;MAAM,CAAC,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC/CF,KAAK,CAACN,WAAW,GAAGI,MAAM,CAACC,OAAO;IACpC,CAAC;IACD;IACAS,SAAS,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACL,aAAa,GAAG,IAAI;MAC1BK,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACC,OAAO,CAACL,WAAW;MAC9CG,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACC,OAAO,CAACN,KAAK;;MAElC;MACAQ,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC;QAC3CX,WAAW,EAAEI,MAAM,CAACC,OAAO,CAACL,WAAW;QACvCD,KAAK,EAAEK,MAAM,CAACC,OAAO,CAACN,KAAK;QAC3BD,aAAa,EAAEM,MAAM,CAACC,OAAO,CAACP;MAChC,CAAC,CAAC,CAAC;IACL,CAAC;IACD;IACAiB,WAAW,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACL,aAAa,GAAG,KAAK;MAC3BK,KAAK,CAACH,WAAW,GAAG,KAAK;MACzBG,KAAK,CAACJ,KAAK,GAAG,IAAI;;MAElB;MACAQ,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC;QAC3CX,WAAW,EAAE,KAAK;QAClBD,KAAK,EAAE,IAAI;QACXD,aAAa,EAAE;MACjB,CAAC,CAAC,CAAC;IACL;EACF;AACF,CAAC,CAAC;;AAEF;AACA,eAAeH,SAAS,CAACqB,OAAO;AAChC,OAAO,MAAM;EAAEd,SAAS;EAAEU,UAAU;EAAEC,eAAe;EAAEE,WAAW;EAAED;AAAU,CAAC,GAAGnB,SAAS,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}